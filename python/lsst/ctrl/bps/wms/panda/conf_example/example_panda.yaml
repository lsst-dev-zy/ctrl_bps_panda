pipelineYaml: /opt/lsst/software/HSC-PANDA.yaml
project: dev
campaign: "configuration_example"
submitPath: ${HOME}/submit/{outCollection}

computing_cloud: LSST

#This setting supersede cloud and memory requirements
#computeSite: DOMA_LSST_GOOGLE_TEST_HIMEM

maxwalltime: 90000
requestMemory: 2000
maxattempt: 1

whenSaveJobQgraph: "NEVER"
idds_server: "https://aipanda015.cern.ch:443/idds"

placeholderParams: ['qgraphNodeId', 'qgraphId']
submitSideResolvedParams: ['USER']

payload:
  runInit: true
  payloadName: rc2
  butlerConfig: s3://butler-us-central1-panda-dev/hsc/butler.yaml
  inCollection: HSC/defaults
  output: "u/${USER}/pipelines_check"
  outCollection: "{output}/{timestamp}"

  # tracts (smallest to largest): 9615, 9697, 9813
  #dataQuery: "tract = 9813 and instrument='HSC' and skymap='hsc_rings_v1'"
  #dataQuery: "tract = 9615 and patch=30 and instrument='HSC' and skymap='hsc_rings_v1'"
  #Small (~1000 jobs) workflow
  #dataQuery: "tract = 9615 and patch=30 and detector IN (0..103) and detector != 9 and instrument='HSC' and skymap='hsc_rings_v1'"

  #Very small (~150 jobs) workflow
  dataQuery: "tract = 9615 and patch=30 and detector IN (10..20) and instrument='HSC' and skymap='hsc_rings_v1' and band in ('r', 'i')"

  #Very small (~2 jobs) workflow
  #dataQuery: "tract = 9615 and patch=30 and detector IN (10..11) and instrument='HSC' and skymap='hsc_rings_v1' and band in ('r')"
  # ~30k quanta
  #dataQuery: "tract = 9615 and detector IN (0..103) and detector != 9 and instrument='HSC' and skymap='hsc_rings_v1'"
  # ~150k quanta
  #dataQuery: "(tract = 9615 or tract=9697 or (tract=9813 and patch not in (0, 8, 9, 63, 72, 73, 80))) and detector IN (0..103) and detector != 9 and instrument='HSC' and skymap='hsc_rings_v1'"

  sw_image: "spodolsky/centos:7-stack-lsst_distrib-d_2021_07_05-debug_lazy_v1"
  fileDistributionEndPoint: "s3://butler-us-central1-panda-dev/hsc"
  s3_endpoint_url: "https://storage.googleapis.com"
  payload_folder: payload
  runner_command: 'docker run --network host --privileged --env AWS_ACCESS_KEY_ID=$(</credentials/AWS_ACCESS_KEY_ID) --env AWS_SECRET_ACCESS_KEY=$(</credentials/AWS_SECRET_ACCESS_KEY) --env PGPASSWORD=$(</credentials/PGPASSWORD) {sw_image} /bin/bash -c "source /opt/lsst/software/stack/loadLSST.bash;setup lsst_distrib;\${CTRL_BPS_DIR}/python/lsst/ctrl/bps/wms/panda/edgenode/sw_runner _cmd_line_ " >&2;'


pipetask:
  pipetaskInit:
    runQuantumCommand: "${CTRL_MPEXEC_DIR}/bin/pipetask run -b {butlerConfig} -i {inCollection} --output {output} --output-run {outCollection} --init-only --register-dataset-types --qgraph {fileDistributionEndPoint}/{payload_folder}/{uniqProcName}/<FILE:runQgraphFile> --clobber-outputs --no-versions --skip-existing"

    #This setting supersede cloud and memory requirements
    #computeSite: DOMA_LSST_GOOGLE_TEST

  measure:
    requestMemory: 8129
  forcedPhotCcd:
    requestMemory: 8192
  forcedPhotCoadd:
    requestMemory: 8192
  mergeMeasurements:
    requestMemory: 4096
  writeObjectTable:
    requestMemory: 12000 #reduced from 24576: https://github.com/lsst-dm/bps-gen3-rc2/blob/master/bps-rc2_hsc_step3.yaml
  consolidateObjectTable:
    requestMemory: 12000 #reduced from 49152: https://github.com/lsst-dm/bps-gen3-rc2/blob/master/bps-rc2_hsc_step3.yaml
  assembleCoadd:
    requestMemory: 8192
  makeWarp:
    requestMemory: 12000 #reduced from 85000: https://github.com/lsst-dm/bps-gen3-rc2/blob/master/bps-rc2_hsc_step2.yaml
  jointcal:
    requestMemory: 12000 #reduced from 49152: https://github.com/lsst-dm/bps-gen3-rc2/blob/master/bps-rc2_hsc_step2.yaml
  deblend:
    requestMemory: 3000
  skyCorr:
    requestMemory: 11500
  fgcmBuildStarsTable:
    requestMemory: 8192
  fgcmFitCycle:
    requestMemory: 12000 #reduced from 24576: https://github.com/lsst-dm/bps-gen3-rc2/blob/master/bps-rc2_hsc_step1.yaml
  fgcmOutputProducts:
    requestMemory: 8192

saveDot: False
requestCpus: 1
wmsServiceClass: lsst.ctrl.bps.wms.panda.panda_service.PanDAService
clusterAlgorithm: lsst.ctrl.bps.quantum_clustering_funcs.single_quantum_clustering
createQuantumGraph: '${CTRL_MPEXEC_DIR}/bin/pipetask qgraph -d "{dataQuery}" -b {butlerConfig} -i {inCollection} -p {pipelineYaml} -q {qgraphFile} --qgraph-dot {qgraphFile}.dot'
runQuantumCommand: '${CTRL_MPEXEC_DIR}/bin/pipetask run -b {butlerConfig} -i {inCollection} --output {output} --output-run {outCollection} --extend-run --skip-init-writes --qgraph {fileDistributionEndPoint}/{payload_folder}/{uniqProcName}/<FILE:runQgraphFile> --qgraph-id {qgraphId} --qgraph-node-id {qgraphNodeId} --clobber-outputs --skip-existing --no-versions'
templateDataId: "{tract}_{patch}_{band}_{visit}_{exposure}_{detector}"
